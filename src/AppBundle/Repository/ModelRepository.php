<?php

namespace AppBundle\Repository;

use AppBundle\Entity\User;
use AppBundle\Entity\Maker;
use AppBundle\Entity\Model;
use AppBundle\Entity\CategoryModel;
use AppBundle\Entity\Category;
use AppBundle\Entity\ModelStatus;
use AppBundle\Entity\ModelBuy;
use AppBundle\Entity\OrderModelBasket;
use AppBundle\Entity\OrderModelBasketItem;
use AppBundle\Entity\Order;

/**
 * ModelRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ModelRepository extends \Doctrine\ORM\EntityRepository
{
    
    public function findModelsForMaker(Maker $maker)
    {
        $query_builder = $this->createQueryBuilder('o')
            ->where('o.maker = :maker')
            //->andWhere('o.status != ' . Order::STATUS_AWAITING_PAYMENT . '') // exclude awaiting payments orders
            ->setParameter('maker', $maker)
            ->orderBy('o.createdAt', 'DESC');
        return $query_builder->getQuery()->getResult();
    }
    public function findModelsNotDeletedForMaker(Maker $maker)
    {
        $query_builder = $this->createQueryBuilder('o')
            ->leftJoin(ModelStatus::class, 'sta', 'WITH', 'o.status = sta')
            ->where('o.maker = :maker')
            ->andWhere('sta.id <> 5')
            //->andWhere('o.status != ' . Order::STATUS_AWAITING_PAYMENT . '') // exclude awaiting payments orders
            ->setParameter('maker', $maker)
            ->orderBy('o.createdAt', 'DESC');
        return $query_builder->getQuery()->getResult();
    }
    public function findModelsById(int $id_model)
    {
        $query_builder = $this->createQueryBuilder('o')
            ->where('o.id = :id_model')
            ->setParameter('id_model', $id_model);
        return $query_builder->getQuery()->getResult();
    }

    public function findModelsByIdString(string $id_model)
    {
        $query_builder = $this->createQueryBuilder('o')
            ->where('o.id = :id_model')
            ->setParameter('id_model', $id_model);
        return $query_builder->getQuery()->getResult();
    }

    public function findModelsByCetegory(string $name)
    {
        $query_builder = $this->createQueryBuilder('o')
            ->where('o.name = :name')
            ->setParameter('name', $name);
        return $query_builder->getQuery()->getResult();
    }

    public function findModelsFromCategory(Category $category)
    {
        $query_builder = $this->createQueryBuilder('m')
            ->leftJoin(CategoryModel::class, 'c', 'WITH', 'c.model = m')
            ->leftJoin(ModelStatus::class, 'sta', 'WITH', 'm.status = sta')
            ->where('c.category = :category')
            ->andWhere('sta.id = 1')

            ->setParameter('category', $category);
        return $query_builder->getQuery()->getResult();
    }
    
    public function findModelsFromWord(string $word)
    {
        $query_builder = $this->createQueryBuilder('model')
            ->leftJoin(Maker::class, 'maker', 'WITH', 'maker = model.maker')
            ->leftJoin(CategoryModel::class, 'cm', 'WITH', 'cm.model = model')
            ->leftJoin(Category::class, 'c', 'WITH', 'cm.category = c')
            ->leftJoin(Category::class, 'cu', 'WITH', 'c.upCategory = cu')
            ->leftJoin(ModelStatus::class, 'sta', 'WITH', 'model.status = sta')
            ->where('model.name LIKE :word
                OR model.priceTaxIncl LIKE :wordExact
                OR model.description LIKE :word
                OR model.caracteristique LIKE :word
                OR model.tags LIKE :word
                OR c.name LIKE :word
                OR cu.name LIKE :word
                OR maker.lastname LIKE :word
                OR maker.firstname LIKE :word
                OR maker.company LIKE :word
            ')
            ->andWhere('sta.id = 1')
            ->orWhere('sta.id = 2')
            ->andWhere('model.name LIKE :word
                OR model.priceTaxIncl LIKE :wordExact
                OR model.description LIKE :word
                OR model.caracteristique LIKE :word
                OR model.tags LIKE :word
                OR c.name LIKE :word
                OR cu.name LIKE :word
                OR maker.lastname LIKE :word
                OR maker.firstname LIKE :word
                OR maker.company LIKE :word
            ')
            ->setParameter('word', '%'.$word.'%')
            ->setParameter('wordExact', $word);
        return $query_builder->getQuery()->getResult();
    }

    public function findModelsFromWordOrderByDate(string $word)
    {
        $query_builder = $this->createQueryBuilder('model')
            ->leftJoin(Maker::class, 'maker', 'WITH', 'maker = model.maker')
            ->leftJoin(CategoryModel::class, 'cm', 'WITH', 'cm.model = model')
            ->leftJoin(Category::class, 'c', 'WITH', 'cm.category = c')
            ->leftJoin(Category::class, 'cu', 'WITH', 'c.upCategory = cu')
            ->leftJoin(ModelStatus::class, 'sta', 'WITH', 'model.status = sta')
            ->where('model.name LIKE :word
                OR model.priceTaxIncl LIKE :wordExact
                OR model.description LIKE :word
                OR model.caracteristique LIKE :word
                OR model.tags LIKE :word
                OR c.name LIKE :word
                OR cu.name LIKE :word
                OR maker.lastname LIKE :word
                OR maker.firstname LIKE :word
                OR maker.company LIKE :word
            ')
            ->andWhere('sta.id = 1')
            ->orWhere('sta.id = 2')
            ->andWhere('model.name LIKE :word
                OR model.priceTaxIncl LIKE :wordExact
                OR model.description LIKE :word
                OR model.caracteristique LIKE :word
                OR model.tags LIKE :word
                OR c.name LIKE :word
                OR cu.name LIKE :word
                OR maker.lastname LIKE :word
                OR maker.firstname LIKE :word
                OR maker.company LIKE :word
            ')
            ->setParameter('word', '%'.$word.'%')
            ->setParameter('wordExact', $word)
            ->orderBy('model.createdAt', 'DESC');
        return $query_builder->getQuery()->getResult();
    }

    public function findSuggection(Model $model)
    {
        $query_builder = $this->createQueryBuilder('model')
            ->leftJoin(Maker::class, 'maker', 'WITH', 'maker = model.maker')
            ->leftJoin(CategoryModel::class, 'cm', 'WITH', 'cm.model = model')
            ->leftJoin(Category::class, 'c', 'WITH', 'cm.category = c')
            ->leftJoin(Category::class, 'cu', 'WITH', 'c.upCategory = cu')
            ->leftJoin(ModelStatus::class, 'sta', 'WITH', 'model.status = sta')
            ->where('model.name LIKE :word
                OR model.priceTaxIncl LIKE :wordExact
                OR model.description LIKE :word
                OR model.caracteristique LIKE :word
                OR model.tags LIKE :word
                OR c.name LIKE :word
                OR cu.name LIKE :word
                OR maker.lastname LIKE :word
                OR maker.firstname LIKE :word
                OR maker.company LIKE :word
            ')

            ->andWhere('sta.id = 1')
            ->orWhere('sta.id = 2')
            ->andWhere('model.name LIKE :word
                OR model.priceTaxIncl LIKE :wordExact
                OR model.description LIKE :word
                OR model.caracteristique LIKE :word
                OR model.tags LIKE :word
                OR c.name LIKE :word
                OR cu.name LIKE :word
                OR maker.lastname LIKE :word
                OR maker.firstname LIKE :word
                OR maker.company LIKE :word
            ')
            ->setParameter('word', '%'.$word.'%')
            ->setParameter('wordExact', $word);
        return $query_builder->getQuery()->getResult();
    }

    public function findModelsFreeFromWord(string $word)
    {
        $query_builder = $this->createQueryBuilder('model')
            ->leftJoin(Maker::class, 'maker', 'WITH', 'maker = model.maker')
            ->leftJoin(CategoryModel::class, 'cm', 'WITH', 'cm.model = model')
            ->leftJoin(Category::class, 'c', 'WITH', 'cm.category = c')
            ->leftJoin(Category::class, 'cu', 'WITH', 'c.upCategory = cu')
            ->leftJoin(ModelStatus::class, 'sta', 'WITH', 'model.status = sta')
            ->where('model.name LIKE :word
                OR model.priceTaxIncl = 0
                OR model.description LIKE :word
                OR model.caracteristique LIKE :word
                OR model.tags LIKE :word
                OR c.name LIKE :word
                OR cu.name LIKE :word
                OR maker.lastname LIKE :word
                OR maker.firstname LIKE :word
                OR maker.company LIKE :word
            ')
            ->andWhere('sta.id = 1')
            ->orWhere('sta.id = 2')
            ->andWhere('model.name LIKE :word
                OR model.priceTaxIncl = 0
                OR model.description LIKE :word
                OR model.caracteristique LIKE :word
                OR model.tags LIKE :word
                OR c.name LIKE :word
                OR cu.name LIKE :word
                OR maker.lastname LIKE :word
                OR maker.firstname LIKE :word
                OR maker.company LIKE :word
            ')
            ->setParameter('word', '%'.$word.'%');
        return $query_builder->getQuery()->getResult();
    }

    public function findModelsFreeFromWordOrderByDate(string $word)
    {
        $query_builder = $this->createQueryBuilder('model')
            ->leftJoin(Maker::class, 'maker', 'WITH', 'maker = model.maker')
            ->leftJoin(CategoryModel::class, 'cm', 'WITH', 'cm.model = model')
            ->leftJoin(Category::class, 'c', 'WITH', 'cm.category = c')
            ->leftJoin(Category::class, 'cu', 'WITH', 'c.upCategory = cu')
            ->leftJoin(ModelStatus::class, 'sta', 'WITH', 'model.status = sta')
            ->where('model.name LIKE :word
                OR model.priceTaxIncl = 0
                OR model.description LIKE :word
                OR model.caracteristique LIKE :word
                OR model.tags LIKE :word
                OR c.name LIKE :word
                OR cu.name LIKE :word
                OR maker.lastname LIKE :word
                OR maker.firstname LIKE :word
                OR maker.company LIKE :word
            ')
            ->andWhere('sta.id = 1')
            ->orWhere('sta.id = 2')
            ->andWhere('model.name LIKE :word
                OR model.priceTaxIncl = 0
                OR model.description LIKE :word
                OR model.caracteristique LIKE :word
                OR model.tags LIKE :word
                OR c.name LIKE :word
                OR cu.name LIKE :word
                OR maker.lastname LIKE :word
                OR maker.firstname LIKE :word
                OR maker.company LIKE :word
            ')
            ->setParameter('word', '%'.$word.'%')
            ->orderBy('model.createdAt', 'DESC');
        return $query_builder->getQuery()->getResult();
    }

    public function findModelsValide()
    {
        $query_builder = $this->createQueryBuilder('model')
            ->leftJoin(ModelStatus::class, 'sta', 'WITH', 'model.status = sta')
            ->where('sta.id = 1')
            ->orWhere('sta.id = 2');
        return $query_builder->getQuery()->getResult();
    }


    public function findModelsValideOrder(String $order, String $dir)
    {
        $query_builder = $this->createQueryBuilder('model')
            ->leftJoin(ModelStatus::class, 'sta', 'WITH', 'model.status = sta')
            ->where('sta.id = 1')
            ->orWhere('sta.id = 2')
            ->orderBy($order, $dir)
            ->addOrderBy('model.createdAt', 'DESC');
        return $query_builder->getQuery()->getResult();
    }

    public function findFirstModelsValideOrder(String $order, String $dir)
    {
        $query_builder = $this->createQueryBuilder('model')
            ->leftJoin(ModelStatus::class, 'sta', 'WITH', 'model.status = sta')
            ->where('sta.id = 1')
            ->orWhere('sta.id = 2')
            ->orderBy($order, $dir)
            ->addOrderBy('model.createdAt', 'DESC')
            ->setMaxResults(9);
        return $query_builder->getQuery()->getResult();
    }

    public function findCategoryModelsValideOrder(String $category, String $order, String $dir)
    {
        $query_builder = $this->createQueryBuilder('model')
            ->leftJoin(ModelStatus::class, 'sta', 'WITH', 'model.status = sta')
            ->leftJoin(CategoryModel::class, 'c', 'WITH', 'c.model = model')
            ->where('c.category = :cat')
            ->andWhere('sta.id = 1')
            ->orWhere('sta.id = 2')
            ->andWhere('c.category = :cat')
            ->orderBy($order, $dir)
            ->addOrderBy('model.createdAt', 'DESC')
            ->setParameter('cat', $category);
        return $query_builder->getQuery()->getResult();
    }

    public function findFirstCategoryModelsValideOrder(String $category, String $order, String $dir)
    {
        $query_builder = $this->createQueryBuilder('model')
            ->leftJoin(ModelStatus::class, 'sta', 'WITH', 'model.status = sta')
            ->leftJoin(CategoryModel::class, 'c', 'WITH', 'c.model = model')
            ->where('c.category = :cat')
            ->andWhere('sta.id = 1')
            ->orWhere('sta.id = 2')
            ->andWhere('c.category = :cat')
            ->orderBy($order, $dir)
            ->addOrderBy('model.createdAt', 'DESC')
            ->setParameter('cat', $category)
            ->setMaxResults(9);
        return $query_builder->getQuery()->getResult();
    }

    public function findCategoryAllModelsValideOrder(String $category, String $order, String $dir)
    {
        $query_builder = $this->createQueryBuilder('model')
            ->leftJoin(ModelStatus::class, 'sta', 'WITH', 'model.status = sta')
            ->leftJoin(CategoryModel::class, 'c', 'WITH', 'c.model = model')
            ->leftJoin(Category::class, 'cate', 'WITH', 'cate = c.category')
            ->where('cate.upCategory = :cat')
            ->andWhere('sta.id = 1')
            ->orWhere('sta.id = 2')
            ->andWhere('cate.upCategory = :cat')
            ->orderBy($order, $dir)
            ->addOrderBy('model.createdAt', 'DESC')
            ->setParameter('cat', $category);
        return $query_builder->getQuery()->getResult();
    }

    public function findFirstCategoryAllModelsValideOrder(String $category, String $order, String $dir)
    {
        $query_builder = $this->createQueryBuilder('model')
            ->leftJoin(ModelStatus::class, 'sta', 'WITH', 'model.status = sta')
            ->leftJoin(CategoryModel::class, 'c', 'WITH', 'c.model = model')
            ->leftJoin(Category::class, 'cate', 'WITH', 'cate = c.category')
            ->where('cate.upCategory = :cat')
            ->andWhere('sta.id = 1')
            ->orWhere('sta.id = 2')
            ->andWhere('cate.upCategory = :cat')
            ->orderBy($order, $dir)
            ->addOrderBy('model.createdAt', 'DESC')
            ->setParameter('cat', $category)
            ->setMaxResults(9);
        return $query_builder->getQuery()->getResult();
    }

    public function findMakerModelsValideOrder(String $maker, String $order, String $dir)
    {
        $query_builder = $this->createQueryBuilder('model')
            ->leftJoin(ModelStatus::class, 'sta', 'WITH', 'model.status = sta')
            ->leftJoin(Maker::class, 'maker', 'WITH', 'maker = model.maker')
            ->where('maker = :maker')
            ->andWhere('sta.id = 1')
            ->orWhere('sta.id = 2')
            ->andWhere('maker = :maker')
            ->orderBy($order, $dir)
            ->addOrderBy('model.createdAt', 'DESC')
            ->setParameter('maker', $maker);
        return $query_builder->getQuery()->getResult();
    }

    public function findFirstMakerModelsValideOrder(String $maker, String $order, String $dir)
    {
        $query_builder = $this->createQueryBuilder('model')
            ->leftJoin(ModelStatus::class, 'sta', 'WITH', 'model.status = sta')
            ->leftJoin(Maker::class, 'maker', 'WITH', 'maker = model.maker')
            ->where('maker = :maker')
            ->andWhere('sta.id = 1')
            ->orWhere('sta.id = 2')
            ->andWhere('maker = :maker')
            ->orderBy($order, $dir)
            ->addOrderBy('model.createdAt', 'DESC')
            ->setParameter('maker', $maker)
            ->setMaxResults(9);
        return $query_builder->getQuery()->getResult();
    }

    public function findModelsValideForMaker(Maker $maker)
    {
        $query_builder = $this->createQueryBuilder('o')
            ->leftJoin(ModelStatus::class, 'sta', 'WITH', 'o.status = sta')
            ->where('o.maker = :maker')
            ->andWhere('sta.id = 1')
            ->orWhere('sta.id = 2')
            ->andWhere('o.maker = :maker')
            ->setParameter('maker', $maker)
            ->orderBy('o.createdAt', 'DESC');
        return $query_builder->getQuery()->getResult();
    }

    public function findModelsFromStatus(string $status)
    {
        $query_builder = $this->createQueryBuilder('m')
            ->leftJoin(ModelStatus::class, 'sta', 'WITH', 'm.status = sta')
            ->Where('sta.id = :status')
            ->setParameter('status', $status);
        return $query_builder->getQuery()->getResult();
    }

    public function findAllModelsInBasketForUser(User $user)
    {
        $query_builder = $this->createQueryBuilder('model')
            ->leftJoin(OrderModelBasketItem::class, 'basketItem', 'WITH', 'basketItem.model = model')
            ->leftJoin(OrderModelBasket::class, 'basket', 'WITH', 'basketItem.orderModelBasket = basket')
            ->where('basket.customer = :user')
            ->setParameter('user', $user)
            ->orderBy('model.maker', 'ASC');
        return $query_builder->getQuery()->getResult();
    }

    public function findModelFromOrder(Order $orderSearch)
    {
        $query_builder = $this->createQueryBuilder('model')
            ->leftJoin(ModelBuy::class, 'modelBuy', 'WITH', 'modelBuy.model = model')
            ->where('modelBuy.order = :orderSearch')
            ->setParameter('orderSearch', $orderSearch);
        return $query_builder->getQuery()->getResult();
    }
    
}
