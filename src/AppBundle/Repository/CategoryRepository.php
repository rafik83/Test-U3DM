<?php

namespace AppBundle\Repository;
use AppBundle\Entity\Category;
use AppBundle\Entity\Model;
use AppBundle\Entity\ModelStatus;
use AppBundle\Entity\CategoryModel;
use Doctrine\Common\Persistence\ObjectManager;

/**
 * CategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoryRepository extends \Doctrine\ORM\EntityRepository
{
    public function findCategoryLevel0()
    {
        return $this->createQueryBuilder('o')
            ->where('o.upCategory IS Null')
            ->orderBy('o.name', 'ASC');
    }
    public function findCategoryLevel1()
    {
        return $this->createQueryBuilder('o')
            ->leftJoin(Category::class, 'categoryUp', 'WITH', 'o.upCategory = categoryUp')
            ->where('o.upCategory IS NOT Null')
            ->orderBy('categoryUp.name', 'ASC')
            ->addOrderBy('o.name', 'ASC');
    }
    public function findCategoryValidLevel0()
    {
        $dql = 'SELECT Ca FROM AppBundle\Entity\Category Ca, AppBundle\Entity\Category Cb
        LEFT JOIN AppBundle\Entity\CategoryModel CM WITH Cb = CM.category
        LEFT JOIN AppBundle\Entity\Model Model WITH Model = CM.model
        LEFT JOIN AppBundle\Entity\ModelStatus Sta WITH Model.status = Sta
        WHERE Ca = Cb.upCategory AND CM.model IS NOT NULL
        AND ( Sta.id = 1 OR Sta.id = 2) ORDER BY Ca.name ASC';
        $query = $this->getEntityManager()->createQuery($dql);
        return $query->execute();
    }
    public function findCategoryValidLevel1()
    {
        $query_builder = $this->createQueryBuilder('o')
            ->leftJoin(CategoryModel::class, 'cm', 'WITH', 'o = cm.category')
            ->leftJoin(Model::class, 'model', 'WITH', 'model = cm.model')
            ->leftJoin(ModelStatus::class, 'sta', 'WITH', 'model.status = sta')
            ->where('o.upCategory IS NOT Null')
            ->andWhere('cm.model IS NOT Null')
            ->andWhere('sta.id = 1')
            ->orWhere('sta.id = 2')
            ->OrderBy('o.name', 'ASC');
        return $query_builder->getQuery()->getResult();
    }
    public function findUpCategory()
    {
        return $this->createQueryBuilder('o')
            ->where('o.upCategory IS Null')
            ->orderBy('o.name', 'ASC');
    }
    public function findCategoryOfLevel0()
    {
        $query_builder = $this->createQueryBuilder('o')
            ->where('o.upCategory IS Null')
            ->orderBy('o.name', 'ASC');
        return $query_builder->getQuery()->getResult();
    }
    public function findCategoryOfLevel1()
    {
        $query_builder = $this->createQueryBuilder('o')
            ->where('o.upCategory IS NOT Null')
            ->orderBy('o.name', 'ASC');
        return $query_builder->getQuery()->getResult();
    }
    public function findCategoryByName($name)
    {
        $query_builder = $this->createQueryBuilder('o')
            ->where('o.name = :name')
            ->setParameter('name', $name);
        return $query_builder->getQuery()->getResult();
    }

    public function findCategoryOfModel(Model $model)
    {
        $query_builder = $this->createQueryBuilder('category')
            ->leftJoin(CategoryModel::class, 'cm', 'WITH', 'cm.category = category')
            ->leftJoin(Model::class, 'model', 'WITH', 'model = cm.model')
            ->where('model = :model')
            ->setParameter('model', $model);
        return $query_builder->getQuery()->getResult();
    }
    public function findCategoryUpOfModel(Model $model)
    {
        $query_builder = $this->createQueryBuilder('category')
            ->leftJoin(CategoryModel::class, 'cm', 'WITH', 'cm.category = category')
            ->leftJoin(Model::class, 'model', 'WITH', 'model = cm.model')
            ->where('model = :model')
            ->andWhere('category.upCategory IS Null')
            ->setParameter('model', $model);
        return $query_builder->getQuery()->getResult();
    }
}
