<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Order;
use AppBundle\Entity\User;
use AppBundle\Entity\Model;
use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\Common\Persistence\ObjectManager;
/**
 * ModelDownloadRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ModelDownloadRepository extends \Doctrine\ORM\EntityRepository
{
    public function findDistinctDownloadForModel(Model $modelSearch, ObjectManager $entityManager)
    {
        /*
        $query_builder = $this->createQueryBuilder('o')
            ->where('o.model = :modelSearch')
            ->setParameter('modelSearch', $modelSearch)
            ->distinct(true);
        return $query_builder->getQuery()->getResult();
        */
        $rsm = new ResultSetMapping();
        $rsm->addEntityResult('AppBundle\Entity\ModelDownload', 'MD');
        $rsm->addFieldResult('MD', 'id', 'id');
        $rsm->addFieldResult('MD', 'customer', 'customer_id');
        $rsm->addFieldResult('MD', 'sessionName', 'sessionName');

        $query = $entityManager->createNativeQuery('SELECT DISTINCT `sessionName`,`customer_id` FROM `model_download` WHERE `model_id` = ?', $rsm);
        $query->setParameter(1, $modelSearch->getId());
        return $query->getResult();
    }

    public function findDownloadForModelAndUser(Model $modelSearch, User $customerSearch)
    {
        $query_builder = $this->createQueryBuilder('o')
            ->where('o.model = :modelSearch')
            ->andWhere('o.customer = :customerSearch')
            ->setParameter('modelSearch', $modelSearch)
            ->setParameter('customerSearch', $customerSearch);
        return $query_builder->getQuery()->getResult();
    }
}
