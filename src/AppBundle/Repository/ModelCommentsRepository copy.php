<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Model;
use AppBundle\Entity\ModelComments;

/**
 * ModelCommentsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ModelCommentsRepository extends \Doctrine\ORM\EntityRepository
{
    public function findCommentsForModel(Model $modelSearch)
    {
        $query_builder = $this->createQueryBuilder('o')
            ->where('o.model = :modelSearch')
            ->andWhere('o.upComments IS Null')
            ->setParameter('modelSearch', $modelSearch)
            ->orderBy('o.createdAt', 'DESC')
            ->setMaxResults(3);
        return $query_builder->getQuery()->getResult();
    }

    public function findResponseForModel(ModelComments $commentSearch)
    {
        $query_builder = $this->createQueryBuilder('o')
            ->where('o.upComments = :commentSearch')
            ->setParameter('commentSearch', $commentSearch)
            ->orderBy('o.createdAt', 'DESC');
        return $query_builder->getQuery()->getResult();
    }

    public function findAllUpCommentsForModel(Model $modelSearch)
    {
        $query_builder = $this->createQueryBuilder('o')
            ->where('o.model = :modelSearch')
            ->andWhere('o.upComments IS Null')
            ->setParameter('modelSearch', $modelSearch)
            ->orderBy('o.createdAt', 'DESC');
        return $query_builder->getQuery()->getResult();
    }

    public function findAllCommentNotValid()
    {
        $query_builder = $this->createQueryBuilder('o')
            ->where('o.enabled = :enabled')
            ->setParameter('enabled', false)
            ->orderBy('o.createdAt', 'DESC');
        return $query_builder->getQuery()->getResult();
    }

    public function findAllDownCommentNot(ModelComments $commentSearch)
    {
        $query_builder = $this->createQueryBuilder('o')
            ->where('o.upComments = :commentSearch')
            ->setParameter('commentSearch', $commentSearch);
        return $query_builder->getQuery()->getResult();
    }
    
}
