# Learn more about services, parameters and containers at
# https://symfony.com/doc/current/service_container.html
parameters:
    #parameter_name: value

services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    AppBundle\:
        resource: '../../src/AppBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/AppBundle/{Entity,Repository,Tests}'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    AppBundle\Controller\:
        resource: '../../src/AppBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

    # add more services, or override services that need manual wiring
    # AppBundle\Service\ExampleService:
    #     arguments:
    #         $someArgument: 'some_value'
    AppBundle\Service\Mailjet:
        arguments:
            $client: '@mailjet.client'
            $emailFromAddress: '%email_from_address%'
            $emailFromName: '%email_from_name%'
            $logger: '@logger'

    AppBundle\Service\SendinBlue:
        arguments:
            $smtpClient: '@sendinblue_api.smtp_endpoint'
            $contactsClient: '@sendinblue_api.contacts_endpoint'
            $emailFromAddress: '%email_from_address%'
            $emailFromName: '%email_from_name%'
            $adminNotificationEmailAddress: '%admin_notification_email_address%'
            $logger: '@logger'

    AppBundle\Service\Mailer:
        arguments:
            $mailer: '@mailer'
            $templating: '@twig'
            $emailFromAddress: '%email_from_address%'
            $emailFromName: '%email_from_name%'
            $adminNotificationEmailAddress: '%admin_notification_email_address%'

    AppBundle\Service\Colissimo:
        arguments:
            $contractNumber: '%colissimo_contract_number%'
            $password: '%colissimo_password%'
            $entityManager: '@doctrine.orm.entity_manager'

    AppBundle\Service\Chronopost:
        arguments:
            $accountNumber: '%chronopost_account_number%'
            $password: '%chronopost_password%'
            $entityManager: '@doctrine.orm.entity_manager'

    AppBundle\Service\StripeManager:
        public: false
        arguments:
            $secretKey: '%stripe_secret_key%'
            $stripeVersion: '%stripe_version%'
            $config: '%payment%'
            $em: '@doctrine.orm.entity_manager'
            $logger: '@logger'

    app.service.stripe:
        alias: AppBundle\Service\StripeManager
        public: true

    app.upload_listener:
        class: AppBundle\Event\UploadListener
        arguments: 
            $em : "@doctrine.orm.entity_manager"
        tags:
            - { name: kernel.event_listener, event: oneup_uploader.post_persist, method: onUpload }

